{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","action.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","SearchBox","searchField","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","res","json","users","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.499da923.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return ( \r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"Robot\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n    return ( \r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return <Card \r\n                                key={i} \r\n                                id={user.id} \r\n                                name={user.name} \r\n                                email={user.email}  \r\n                            />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, onSearchChange}) => {\r\n    return ( \r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                name=\"\" id=\"\" \r\n                placeholder=\"Search robots\" \r\n                onChange={onSearchChange}\r\n            />\r\n        </div>\r\n        \r\n     );\r\n}\r\n \r\nexport default SearchBox;","// import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return ( \r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n        \r\n     );\r\n}\r\n \r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() { \r\n        if(this.state.hasError){\r\n            return <h1>Something went wrong...!!! We will fix it...!!!</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n \r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport { setSearchField, requestRobots } from '../action'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchtoProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component{\r\n  \r\n  componentDidMount(){\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  render(){\r\n    const { searchField, onSearchChange, robots, isPending } = this.props\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\r\n    })\r\n    return isPending ?\r\n      <h1 className=\"tc\">Loading</h1> : \r\n      (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f2\">Robofriends</h1>\r\n          <SearchBox onSearchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchtoProps)(App);\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => (\r\n    {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n)\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(res => res.json())\r\n      .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }) )\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}